// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	pubsub "stock-data-processing/pkg/pubsub"

	mock "github.com/stretchr/testify/mock"
)

// Publisher is an autogenerated mock type for the Publisher type
type Publisher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Publisher) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: topic, key, headers, message
func (_m *Publisher) Send(topic string, key string, headers pubsub.MessageHeaders, message []byte) error {
	ret := _m.Called(topic, key, headers, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, pubsub.MessageHeaders, []byte) error); ok {
		r0 = rf(topic, key, headers, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPublisher(t mockConstructorTestingTNewPublisher) *Publisher {
	mock := &Publisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
