// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	entities "stock-data-processing/api-service/entities"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetList provides a mock function with given fields: take, limit
func (_m *Repository) GetList(take int, limit int) (*[]entities.User, int64, error) {
	ret := _m.Called(take, limit)

	var r0 *[]entities.User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) (*[]entities.User, int64, error)); ok {
		return rf(take, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) *[]entities.User); ok {
		r0 = rf(take, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(take, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(take, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOne provides a mock function with given fields: id
func (_m *Repository) GetOne(id int) (entities.User, error) {
	ret := _m.Called(id)

	var r0 entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entities.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) entities.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: user
func (_m *Repository) InsertOne(user entities.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
