// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	entities "stock-data-processing/api-service/entities"

	mock "github.com/stretchr/testify/mock"

	utils "stock-data-processing/api-service/utils"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GetList provides a mock function with given fields: take, limit
func (_m *Usecase) GetList(take int, limit int) (*utils.Pagination, error) {
	ret := _m.Called(take, limit)

	var r0 *utils.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*utils.Pagination, error)); ok {
		return rf(take, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) *utils.Pagination); ok {
		r0 = rf(take, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Pagination)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(take, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: user
func (_m *Usecase) Insert(user entities.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecase(t mockConstructorTestingTNewUsecase) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
